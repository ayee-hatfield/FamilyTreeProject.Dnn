<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actions.Text" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="AddIndividual.Text" xml:space="preserve">
    <value>Add Individual</value>
  </data>
  <data name="AncestorView.Text" xml:space="preserve">
    <value>Ancestor View</value>
  </data>
  <data name="Birth.Text" xml:space="preserve">
    <value>Birth</value>
  </data>
  <data name="Death.Text" xml:space="preserve">
    <value>Death</value>
  </data>
  <data name="FamilyGroupView.Text" xml:space="preserve">
    <value>Family Group View</value>
  </data>
  <data name="FindIndividual.Text" xml:space="preserve">
    <value>Find Individual</value>
  </data>
  <data name="GettingStartedMessage.Text" xml:space="preserve">
    <value>You don't have any Trees yet. You can either create one or upload a GEDCOM file you have exported from another application.</value>
  </data>
  <data name="Heading.Text" xml:space="preserve">
    <value>Family Tree Project</value>
  </data>
  <data name="IndividualList.Text" xml:space="preserve">
    <value>Individual List</value>
  </data>
  <data name="IndividualsPageSize.Text" xml:space="preserve">
    <value>Individuals per page</value>
  </data>
  <data name="Individuals_NoPagerFormat.Text" xml:space="preserve">
    <value>Showing {0} Individuals</value>
  </data>
  <data name="Individuals_PagerFormat.Text" xml:space="preserve">
    <value>Showing {0}-{1} of {2} Individuals</value>
  </data>
  <data name="Name.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Pager_PageDesc.Text" xml:space="preserve">
    <value>Page {0} of {1}</value>
  </data>
  <data name="Tree.Text" xml:space="preserve">
    <value>Tree</value>
  </data>
  <data name="TreeOverView.Text" xml:space="preserve">
    <value>Tree Overview</value>
  </data>
  <data name="CreateTree.Text" xml:space="preserve">
    <value>Create Tree</value>
  </data>
  <data name="UploadTree.Text" xml:space="preserve">
    <value>Upload Tree</value>
  </data>
  <data name="MyFolder.Text" xml:space="preserve">
    <value>My Folder</value>
  </data>
  <data name="UploadTo.Text" xml:space="preserve">
    <value> </value>
  </data>
  <data name="AlreadyExists.Text" xml:space="preserve">
    <value>The file already exists</value>
  </data>
  <data name="ExtensionNotAllowed.Text" xml:space="preserve">
    <value>This extension is not allowed.  Please contact your site administrator to allow the upload of GEDCOM(.ged) files</value>
  </data>
  <data name="CloseButtonText.Text" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="DragAndDropAreaTitle.Text" xml:space="preserve">
    <value>Drag files here or click to browse</value>
  </data>
  <data name="emptyFileUpload.Text" xml:space="preserve">
    <value>Your browser does not support empty file uploads</value>
  </data>
  <data name="errorDialogTitle.Text" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="FileAlreadyExists.Text" xml:space="preserve">
    <value>This file already exists</value>
  </data>
  <data name="fileIsTooLarge.Text" xml:space="preserve">
    <value>File size bigger than 28 Mb</value>
  </data>
  <data name="fileUploadCancelled.Text" xml:space="preserve">
    <value>Upload cancelled</value>
  </data>
  <data name="fileUploaded.Text" xml:space="preserve">
    <value>File uploaded</value>
  </data>
  <data name="fileUploadFailed.Text" xml:space="preserve">
    <value>Upload failed</value>
  </data>
  <data name="KeepButtonText.Text" xml:space="preserve">
    <value>Keep</value>
  </data>
  <data name="ReplaceButtonText.Text" xml:space="preserve">
    <value>Replace</value>
  </data>
  <data name="tooManyFiles.Text" xml:space="preserve">
    <value>You connot upload more than {0} file(s) at once.</value>
  </data>
  <data name="UploadFileMethod.Text" xml:space="preserve">
    <value>Upload File</value>
  </data>
  <data name="UploadFromWebButtonText.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="UploadFromWebMethod.Text" xml:space="preserve">
    <value>From URL</value>
  </data>
  <data name="uploadStopped.Text" xml:space="preserve">
    <value>File upload stopped</value>
  </data>
  <data name="urlTooltip.Text" xml:space="preserve">
    <value>Enter Resource Url like http://SomeWebSite.com/Images/About.png</value>
  </data>
  <data name="CreateTreeMessage.Text" xml:space="preserve">
    <value>To create a Family Tree give your tree a name, a short title and a description.  This information will displayed on the Tree View page.</value>
  </data>
  <data name="Description.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Title.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="UploadTreeMessage.Text" xml:space="preserve">
    <value>To upload a Family Tree to this site, export your Family Tree as a GEDCOM file from the system you are using today to manage your tree.  Ensure that the file has the extension ".ged".  When you upload the file the name of the file will be used as the Tree Name, although you can modify that later.</value>
  </data>
  <data name="UploadFile.Text" xml:space="preserve">
    <value>Upload File</value>
  </data>
  <data name="HomePerson.Text" xml:space="preserve">
    <value>Home Person</value>
  </data>
  <data name="LastViewed.Text" xml:space="preserve">
    <value>Last Viewed Person</value>
  </data>
  <data name="Summary.Text" xml:space="preserve">
    <value>Tree Summary</value>
  </data>
  <data name="Families.Text" xml:space="preserve">
    <value>Families</value>
  </data>
  <data name="Individuals.Text" xml:space="preserve">
    <value>Individuals</value>
  </data>
  <data name="EditTree.Text" xml:space="preserve">
    <value>Edit Tree Properties</value>
  </data>
  <data name="Facts.Text" xml:space="preserve">
    <value>Facts</value>
  </data>
  <data name="UploadImage.Text" xml:space="preserve">
    <value>Upload Image</value>
  </data>
  <data name="UploadImageMessage.Text" xml:space="preserve">
    <value>You can upload a new Image for your Family Tree.</value>
  </data>
  <data name="InvalidFileExtensions.Text" xml:space="preserve">
    <value>The file has an invalid file extension</value>
  </data>
  <data name="EditIndividual.Text" xml:space="preserve">
    <value>Edit Individual</value>
  </data>
  <data name="Family.Text" xml:space="preserve">
    <value>Family</value>
  </data>
  <data name="Parents.Text" xml:space="preserve">
    <value>Parents</value>
  </data>
  <data name="SpouseChildren.Text" xml:space="preserve">
    <value>Spouse and Children</value>
  </data>
  <data name="BaptismFormat.Text" xml:space="preserve">
    <value>Bapt: {0}</value>
  </data>
  <data name="BirthFormat.Text" xml:space="preserve">
    <value>Born: {0}</value>
  </data>
  <data name="BuriedFormat.Text" xml:space="preserve">
    <value>Buried: {0}</value>
  </data>
  <data name="DeathFormat.Text" xml:space="preserve">
    <value>Died: {0}</value>
  </data>
  <data name="AddFather.Text" xml:space="preserve">
    <value>Add Father</value>
  </data>
  <data name="AddMother.Text" xml:space="preserve">
    <value>Add Mother</value>
  </data>
</root>